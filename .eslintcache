[{"D:\\Dev\\Fincances-Frontend\\src\\reportWebVitals.js":"1","D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\searchEntry.js":"2","D:\\Dev\\Fincances-Frontend\\src\\views\\login.js":"3","D:\\Dev\\Fincances-Frontend\\src\\app\\apiServices.js":"4","D:\\Dev\\Fincances-Frontend\\src\\main\\App.js":"5","D:\\Dev\\Fincances-Frontend\\src\\views\\home.js":"6","D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\entryTable.js":"7","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\entryService.js":"8","D:\\Dev\\Fincances-Frontend\\src\\components\\navbar\\navItem.js":"9","D:\\Dev\\Fincances-Frontend\\src\\components\\selectMenu.js":"10","D:\\Dev\\Fincances-Frontend\\src\\views\\signUp.js":"11","D:\\Dev\\Fincances-Frontend\\src\\index.js":"12","D:\\Dev\\Fincances-Frontend\\src\\components\\card.js":"13","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\userService.js":"14","D:\\Dev\\Fincances-Frontend\\src\\main\\routes.js":"15","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\localStorageService.js":"16","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\generalServices.js":"17","D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\primereactCrudTable.js":"18","D:\\Dev\\Fincances-Frontend\\src\\components\\toastr.js":"19","D:\\Dev\\Fincances-Frontend\\src\\components\\form-group.js":"20","D:\\Dev\\Fincances-Frontend\\src\\components\\navbar\\navbar.js":"21","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\authService.js":"22","D:\\Dev\\Fincances-Frontend\\src\\main\\authProvider.js":"23","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\sessionStorageService.js":"24","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\handleErrorService.js":"25"},{"size":375,"mtime":1609197050802,"results":"26","hashOfConfig":"27"},{"size":16667,"mtime":1609877623405,"results":"28","hashOfConfig":"27"},{"size":4889,"mtime":1609953643293,"results":"29","hashOfConfig":"27"},{"size":1971,"mtime":1609958530571,"results":"30","hashOfConfig":"27"},{"size":839,"mtime":1609851825998,"results":"31","hashOfConfig":"27"},{"size":2560,"mtime":1609952966342,"results":"32","hashOfConfig":"27"},{"size":7895,"mtime":1609870332302,"results":"33","hashOfConfig":"27"},{"size":2758,"mtime":1609793144016,"results":"34","hashOfConfig":"27"},{"size":320,"mtime":1609848406675,"results":"35","hashOfConfig":"27"},{"size":469,"mtime":1609783664532,"results":"36","hashOfConfig":"27"},{"size":8447,"mtime":1609872041673,"results":"37","hashOfConfig":"27"},{"size":499,"mtime":1609197050801,"results":"38","hashOfConfig":"27"},{"size":654,"mtime":1609197050791,"results":"39","hashOfConfig":"27"},{"size":483,"mtime":1609957056733,"results":"40","hashOfConfig":"27"},{"size":2123,"mtime":1609870332302,"results":"41","hashOfConfig":"27"},{"size":335,"mtime":1609865937618,"results":"42","hashOfConfig":"27"},{"size":203,"mtime":1609197050790,"results":"43","hashOfConfig":"27"},{"size":13155,"mtime":1609877942309,"results":"44","hashOfConfig":"27"},{"size":920,"mtime":1609197050792,"results":"45","hashOfConfig":"27"},{"size":256,"mtime":1609197050791,"results":"46","hashOfConfig":"27"},{"size":2154,"mtime":1609857809201,"results":"47","hashOfConfig":"27"},{"size":937,"mtime":1609954960312,"results":"48","hashOfConfig":"27"},{"size":1522,"mtime":1609870203986,"results":"49","hashOfConfig":"27"},{"size":775,"mtime":1609955460701,"results":"50","hashOfConfig":"27"},{"size":305,"mtime":1609889108164,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"6quuq7",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"D:\\Dev\\Fincances-Frontend\\src\\reportWebVitals.js",[],["110","111"],"D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\searchEntry.js",["112"],"import React from 'react'\r\nimport Card from '../../components/card'\r\nimport FormGroup from '../../components/form-group'\r\nimport { withRouter } from 'react-router-dom'\r\nimport LocalStorageService from '../../app/service/localStorageService'\r\nimport SelectMenu from '../../components/selectMenu'\r\n// import EntryTable from './entryTable'\r\nimport EntryService from '../../app/service/entryService'\r\nimport UserService from '../../app/service/userService'\r\nimport GeneralServices from '../../app/service/generalServices'\r\n\r\nimport {BiSearch} from 'react-icons/bi'\r\nimport {FaSave} from 'react-icons/fa'\r\nimport * as popUp from '../../components/toastr'\r\n\r\nimport { Dialog } from 'primereact/dialog'\r\nimport { Button } from 'primereact/button'\r\n// import { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber'\r\nimport CrudTable from './primereactCrudTable'\r\nimport { AuthContext } from '../../main/authProvider'\r\n\r\nclass SearchEntry extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.entryService = new EntryService();\r\n        this.userService = new UserService();\r\n        this.generalServices = new GeneralServices();\r\n    }\r\n\r\n    state = {\r\n        year: '',\r\n        month: '',\r\n        type: '',\r\n        status: '',\r\n        description: '',\r\n        value: null,\r\n        user: null,\r\n        entryList: [],\r\n        errorUserMessage: null,\r\n        inputUserErrorClass: null,\r\n        listOfUsers: [],\r\n        displayConfirmation: false,\r\n        idOfEntryToBeDeleted: null,\r\n        errorYearMessage: null,\r\n        inputYearErrorClass: null,\r\n        errorMonthMessage: null,\r\n        inputMonthErrorClass: null,\r\n        errorTypeMessage: null,\r\n        inputTypeErrorClass: null,\r\n        errorValueMessage: null,\r\n        inputValueErrorClass: null,\r\n        errorDescriptionMessage: null,\r\n        inputDescriptionErrorClass: null,\r\n        editId: null,\r\n        loading: false\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.userList()\r\n    }\r\n    userList = async () => {\r\n        var list = [{label: 'Selecione...', value:''}]\r\n        var apiList = []\r\n        await this.userService.getAllUsers()\r\n        .then(response => {\r\n            apiList = response.data\r\n            apiList.forEach(user => {\r\n                list.push({label: user.email, value: user.id})\r\n            });\r\n        }).catch(error => {\r\n            popUp.errorPopUp(error.response.data)\r\n        })\r\n        this.setState({listOfUsers: list})\r\n    }\r\n\r\n    handleChange = async (event) => {\r\n        const value = event.target.value\r\n        const name = event.target.name\r\n        await this.setState({ [name]: value })\r\n        this.search()\r\n    }\r\n\r\n    resetView = () => {\r\n        this.setState({errorUserMessage: null})\r\n        this.setState({inputUserErrorClass: null})\r\n        this.setState({errorUserMessage: null})\r\n        this.setState({inputUserErrorClass: null})\r\n        this.setState({listOfUsers: []})\r\n        this.setState({displayConfirmation: false})\r\n        this.setState({idOfEntryToBeDeleted: null})\r\n        this.setState({errorYearMessage: null})\r\n        this.setState({inputYearErrorClass: null})\r\n        this.setState({errorMonthMessage: null})\r\n        this.setState({inputMonthErrorClass: null})\r\n        this.setState({errorTypeMessage: null})\r\n        this.setState({inputTypeErrorClass: null})\r\n        this.setState({errorValueMessage: null})\r\n        this.setState({inputValueErrorClass: null})\r\n        this.setState({errorDescriptionMessage: null})\r\n        this.setState({inputDescriptionErrorClass: null})\r\n    }\r\n    resetData = () => {\r\n        this.setState({year: ''})\r\n        this.setState({month: ''})\r\n        this.setState({type: ''})\r\n        this.setState({status: ''})\r\n        this.setState({description: ''})\r\n        this.setState({value: null})\r\n        this.setState({user: null})\r\n    }\r\n    search = (showInfoPopUp) => {\r\n        const entryFilter = {\r\n            year: parseInt(this.state.year),\r\n            month: this.state.month,\r\n            type: this.state.type,\r\n            status: this.state.status,\r\n            user: this.state.user,\r\n            value: this.state.value,\r\n            description: this.state.description\r\n        }\r\n        this.setState({loading: true})\r\n        this.entryService.search(entryFilter)\r\n        .then(response => {\r\n            this.setState({entryList:response.data})\r\n            if(!this.state.entryList.length && showInfoPopUp){\r\n                popUp.infoPopUp(\"Nenhum lançamento encontrado com os dados informados\")\r\n            }\r\n            this.setState({loading: false})\r\n        }).catch(error => {\r\n            if(error.response){\r\n            popUp.errorPopUp(error.response.data)\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    editEntry = (id) => {\r\n        this.setState({editId: id})\r\n    }\r\n    askForDeleteEntry = (entryId) => {\r\n        this.setState({idOfEntryToBeDeleted: entryId})\r\n        this.setState({displayConfirmation: true})\r\n    }\r\n    renderDeleteConfirmationFooter = () => {\r\n        return (\r\n            <div>\r\n                <Button label=\"Cancelar\" icon=\"pi pi-times\" onClick={() => this.cancelDeleteEntry()}\r\n                        className=\"p-button-text\" />\r\n                <Button label=\"Confirmar\" icon=\"pi pi-check\"\r\n                        onClick={() => this.deleteEntry(this.state.idOfEntryToBeDeleted)} autoFocus />\r\n            </div>\r\n        );\r\n    }\r\n    deleteMultipleEntrires = (list) => {\r\n        if(list){\r\n            list.forEach(entry => this.deleteEntry(entry.id))\r\n        }\r\n    }\r\n    deleteEntry = async (id) => {\r\n        await this.entryService.deleteEntryById(id)\r\n        .then(response => {\r\n            popUp.successPopUp(\"Lançamento deletado com sucesso\")\r\n        })\r\n        .catch(error => {\r\n            popUp.errorPopUp(error.response.data)\r\n        })\r\n        this.search()\r\n        this.setState({idOfEntryToBeDeleted: null})\r\n        this.setState({displayConfirmation: false})\r\n\r\n    }\r\n    cancelDeleteEntry = () => {\r\n        this.setState({displayConfirmation: false})\r\n        this.setState({idOfEntryToBeDeleted: null})\r\n    }\r\n    checkData = () => {\r\n        var check = true\r\n        if(!this.state.year){\r\n            this.setState({errorYearMessage: \"Campo Ano é obrigatório\"})\r\n            this.setState({inputYearErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.month){\r\n            this.setState({errorMonthMessage: \"Campo Mês é obrigatório\"})\r\n            this.setState({inputMonthErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.type){\r\n            this.setState({errorTypeMessage: \"Campo Tipo de Lançamento é obrigatório\"})\r\n            this.setState({inputTypeErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.value){\r\n            this.setState({errorValueMessage: \"Campo Valor é obrigatório\"})\r\n            this.setState({inputValueErrorClass: \"p-invalid p-d-block\"})\r\n            check=false\r\n        }\r\n        if(!this.state.description){\r\n            this.setState({errorDescriptionMessage: \"Campo Descrição é obrigatório\"})\r\n            this.setState({inputDescriptionErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(this.state.description.length>255){\r\n            popUp.warningPopUp(\"Limite de caracteres (255) para descrição excedido\")\r\n            this.setState({inputDescriptionErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        return check\r\n    }\r\n    save = async () => {\r\n        this.resetView()\r\n        if(this.checkData()){\r\n            const {year, month, type, value, description} = this.state\r\n            const loggedUser = this.context.userLoggedIn\r\n            console.log(loggedUser)\r\n            const newEntry = {year, month, type, value, description, user: loggedUser.id}\r\n            await this.entryService.save(newEntry)\r\n            .then(response => {\r\n                popUp.successPopUp(response.data)\r\n                popUp.infoPopUp(\"Status salvo como Pendente automaticamente\")\r\n            })\r\n            .catch(error => {\r\n                popUp.errorPopUp(error.response.data)\r\n            })\r\n            this.resetData()\r\n            this.search()\r\n    } \r\n    }\r\n\r\n    render() {\r\n        const yearList = this.entryService.getYearList()\r\n        const typeList = this.entryService.getTypeList()\r\n        const statusList = this.entryService.getStatusList()\r\n        const monthList =  this.entryService.getMonthList()\r\n        return (\r\n                   \r\n            <div className=\"bs-docs-section\">\r\n                <Card title = \"Busca e Cadastro de Lançamentos\">\r\n                    <div className = \"col-md-12\">\r\n                    <div className=\"row\">\r\n                    <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Ano \" htmlFor = \"InputYear\">\r\n                            <SelectMenu className={\"form-control \" + this.state.inputYearErrorClass}\r\n                            name=\"year\"\r\n                            list={yearList} \r\n                            value={this.state.year}\r\n                            onChange={this.handleChange}/> \r\n                            <div className=\"invalid-feedback\">{this.state.errorYearMessage}</div>  \r\n                        </FormGroup> \r\n                        </div>\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Mês \" htmlFor = \"Inputmonth\">\r\n                            <SelectMenu className={\"form-control \" + this.state.inputMonthErrorClass}\r\n                                        name=\"month\"\r\n                                        list= {monthList}\r\n                                        value={this.state.month}\r\n                                        onChange={this.handleChange}/>\r\n                            <div className=\"invalid-feedback\">{this.state.errorMonthMessage}</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Tipo de Lançamento \" htmlFor = \"InputType\">\r\n                            <SelectMenu className={\"form-control \" + this.state.inputTypeErrorClass}\r\n                                        name=\"type\"\r\n                                        list= {typeList} \r\n                                        value={this.state.type}\r\n                                        onChange={this.handleChange}/>\r\n                            <div className=\"invalid-feedback\">{this.state.errorTypeMessage}</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Status do Lançamento \" htmlFor = \"InputStatus\">\r\n                            <SelectMenu className=\"form-control\"\r\n                                        name=\"status\"\r\n                                        list= {statusList} \r\n                                        value={this.state.status}\r\n                                        onChange={this.handleChange}/>\r\n                        <div className=\"info-feedback\">Campo utilizado apenas para busca</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Valor \" htmlFor = \"InputValue\">\r\n                        <div className=\"p-field p-col-1\">\r\n                            {/* <input type=\"text\"\r\n                                       className={\"form-control \" + this.state.inputValueErrorClass}\r\n                                        name = \"value\"\r\n                                        value = {this.state.value}\r\n                                        onChange = {this.handleChange}\r\n                                        id=\"InputValue\"\r\n                                        placeholder=\"Digite o valor\" /> */}\r\n                            <InputNumber id=\"InputValue\"\r\n                                        className={this.state.inputValueErrorClass}\r\n                                        style={ {width: '415px'} }\r\n                                        value={this.state.value}\r\n                                        name = \"value\"\r\n                                        onValueChange={this.handleChange}\r\n                                        mode=\"currency\"\r\n                                        currency=\"BRL\"\r\n                                        locale=\"pt-BR\" />\r\n                             <small id=\"username2-help\" className=\"p-invalid p-d-block\">{this.state.errorValueMessage}</small>\r\n                        </div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Usuário \" htmlFor = \"InputUser\">\r\n                            <SelectMenu className=\"form-control\"\r\n                                        name=\"user\"\r\n                                        list= {this.state.listOfUsers} \r\n                                        value={this.state.user}\r\n                                        onChange={this.handleChange}/>\r\n                        <div className=\"info-feedback\">Campo utilizado apenas para busca</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                        <div className = \"col-md-10\">\r\n                        <FormGroup label = \"Descrição \" htmlFor = \"InputDecription\">\r\n                            <textarea   className={\"form-control \" + this.state.inputDescriptionErrorClass}\r\n                                        id=\"InputDecription\"\r\n                                        name=\"description\"\r\n                                        value={this.state.description}\r\n                                        style={{marginTop: '0px', marginBottom: '0px', height: '80px'}}\r\n                                        placeholder=\"Digite a descrição\"\r\n                                        onChange = {this.handleChange} />\r\n                        <div className=\"invalid-feedback\">{this.state.errorDescriptionMessage}</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <button className=\"btn btn-success\" onClick = {e => {this.search(true)} }><BiSearch />  Buscar</button>\r\n                        <button className=\"btn btn-danger right-button\" \r\n                                onClick = {this.save}><FaSave />  Cadastrar</button>\r\n                    </div>\r\n                    <div className=\"bs-docs-section\">\r\n                        {/* <EntryTable list = {this.state.entryList}\r\n                                    editId = {this.state.editId}\r\n                                    editButton = {this.editEntry}\r\n                                    deleteButton = {this.askForDeleteEntry} /> */}\r\n                        <CrudTable list = {this.state.entryList}\r\n                                   deleteButton = {this.askForDeleteEntry}\r\n                                   deleteMulipleEntries = {this.deleteMultipleEntrires}\r\n                                   search = {this.search}\r\n                                   loading = {this.state.loading} />\r\n                    </div>\r\n                </Card>\r\n                <Dialog header=\"Deletar lançamento\"\r\n                        visible={this.state.displayConfirmation}\r\n                        modal = {true} //congela restante da tela\r\n                        style={{ width: '350px' }}\r\n                        footer={this.renderDeleteConfirmationFooter()}\r\n                        onHide={() => this.setState({displayConfirmation: false})}>\r\n                    <div className=\"confirmation-content row\" style={{marginLeft: '10px'}}>\r\n                        <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem', marginRight: '10px'}} />\r\n                        <div style={{marginBottom: '10px'}}> Deseja confirmar deleção? </div>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n              \r\n        )\r\n    }\r\n\r\n}\r\nSearchEntry.contextType = AuthContext\r\nexport default withRouter(SearchEntry)",["113","114"],"D:\\Dev\\Fincances-Frontend\\src\\views\\login.js",[],["115","116"],"D:\\Dev\\Fincances-Frontend\\src\\app\\apiServices.js",[],"D:\\Dev\\Fincances-Frontend\\src\\main\\App.js",[],"D:\\Dev\\Fincances-Frontend\\src\\views\\home.js",[],["117","118"],"D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\entryTable.js",[],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\entryService.js",[],["119","120"],"D:\\Dev\\Fincances-Frontend\\src\\components\\navbar\\navItem.js",[],"D:\\Dev\\Fincances-Frontend\\src\\components\\selectMenu.js",[],"D:\\Dev\\Fincances-Frontend\\src\\views\\signUp.js",[],"D:\\Dev\\Fincances-Frontend\\src\\index.js",[],["121","122"],"D:\\Dev\\Fincances-Frontend\\src\\components\\card.js",[],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\userService.js",[],"D:\\Dev\\Fincances-Frontend\\src\\main\\routes.js",["123"],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\localStorageService.js",[],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\generalServices.js",[],"D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\primereactCrudTable.js",["124"],"D:\\Dev\\Fincances-Frontend\\src\\components\\toastr.js",[],"D:\\Dev\\Fincances-Frontend\\src\\components\\form-group.js",[],"D:\\Dev\\Fincances-Frontend\\src\\components\\navbar\\navbar.js",["125"],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\authService.js",["126"],"import LocalStorageService from './localStorageService'\r\nimport SessionStorageService from './sessionStorageService'\r\n\r\nexport const userLoggedIn = 'userLoggedIn'\r\n\r\nexport default class AuthService {\r\n\r\n    static isUserLoggedIn(){\r\n        // const user = LocalStorageService.getItem(userLoggedIn)\r\n        const data = SessionStorageService.getItem(userLoggedIn)\r\n        if(!data)\r\n        return null\r\n        const user = data.user\r\n        return user && user.id\r\n    }\r\n\r\n    static userLoggedIn(){\r\n        // return LocalStorageService.getItem(userLoggedIn)\r\n        return SessionStorageService.getItem(userLoggedIn)\r\n    }\r\n\r\n    static login(user) {\r\n        // LocalStorageService.addItem(userLoggedIn, user)\r\n        SessionStorageService.addItem(userLoggedIn, user)\r\n    }\r\n\r\n    static logOut(){\r\n        // LocalStorageService.removeItem(userLoggedIn)\r\n        SessionStorageService.removeItem(userLoggedIn)\r\n    }\r\n\r\n}","D:\\Dev\\Fincances-Frontend\\src\\main\\authProvider.js",[],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\sessionStorageService.js",[],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\handleErrorService.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":5,"column":8,"nodeType":"133","messageId":"134","endLine":5,"endColumn":27},{"ruleId":"127","replacedBy":"135"},{"ruleId":"129","replacedBy":"136"},{"ruleId":"127","replacedBy":"137"},{"ruleId":"129","replacedBy":"138"},{"ruleId":"127","replacedBy":"139"},{"ruleId":"129","replacedBy":"140"},{"ruleId":"127","replacedBy":"141"},{"ruleId":"129","replacedBy":"142"},{"ruleId":"127","replacedBy":"143"},{"ruleId":"129","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":56,"column":1,"nodeType":"147","endLine":60,"endColumn":2},{"ruleId":"131","severity":1,"message":"148","line":4,"column":10,"nodeType":"133","messageId":"134","endLine":4,"endColumn":20},{"ruleId":"145","severity":1,"message":"146","line":40,"column":1,"nodeType":"147","endLine":47,"endColumn":2},{"ruleId":"131","severity":1,"message":"132","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":27},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'LocalStorageService' is defined but never used.","Identifier","unusedVar",["149"],["150"],["149"],["150"],["149"],["150"],["149"],["150"],["149"],["150"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'FileUpload' is defined but never used.","no-global-assign","no-unsafe-negation"]