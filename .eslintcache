[{"D:\\Dev\\Fincances-Frontend\\src\\reportWebVitals.js":"1","D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\searchEntry.js":"2","D:\\Dev\\Fincances-Frontend\\src\\views\\login.js":"3","D:\\Dev\\Fincances-Frontend\\src\\app\\apiServices.js":"4","D:\\Dev\\Fincances-Frontend\\src\\main\\App.js":"5","D:\\Dev\\Fincances-Frontend\\src\\views\\home.js":"6","D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\entryTable.js":"7","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\entryService.js":"8","D:\\Dev\\Fincances-Frontend\\src\\components\\navbar\\navItem.js":"9","D:\\Dev\\Fincances-Frontend\\src\\components\\selectMenu.js":"10","D:\\Dev\\Fincances-Frontend\\src\\views\\signUp.js":"11","D:\\Dev\\Fincances-Frontend\\src\\index.js":"12","D:\\Dev\\Fincances-Frontend\\src\\components\\card.js":"13","D:\\Dev\\Fincances-Frontend\\src\\app\\service\\userService.js":"14","D:\\Dev\\Fincances-Frontend\\src\\main\\routes.js":"15"},{"size":375,"mtime":1609197050802,"results":"16","hashOfConfig":"17"},{"size":14656,"mtime":1609275296962,"results":"18","hashOfConfig":"17"},{"size":4781,"mtime":1609337534157,"results":"19","hashOfConfig":"17"},{"size":566,"mtime":1609197050790,"results":"20","hashOfConfig":"17"},{"size":742,"mtime":1609251832208,"results":"21","hashOfConfig":"17"},{"size":2435,"mtime":1609336630903,"results":"22","hashOfConfig":"17"},{"size":2198,"mtime":1609273986690,"results":"23","hashOfConfig":"17"},{"size":2580,"mtime":1609270249034,"results":"24","hashOfConfig":"17"},{"size":226,"mtime":1609197050792,"results":"25","hashOfConfig":"17"},{"size":439,"mtime":1609197050792,"results":"26","hashOfConfig":"17"},{"size":7946,"mtime":1609197050804,"results":"27","hashOfConfig":"17"},{"size":499,"mtime":1609197050801,"results":"28","hashOfConfig":"17"},{"size":654,"mtime":1609197050791,"results":"29","hashOfConfig":"17"},{"size":475,"mtime":1609274875768,"results":"30","hashOfConfig":"17"},{"size":692,"mtime":1609336528503,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"6quuq7",{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Dev\\Fincances-Frontend\\src\\reportWebVitals.js",[],["68","69"],"D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\searchEntry.js",["70","71","72","73"],"import React from 'react'\r\nimport Card from '../../components/card'\r\nimport FormGroup from '../../components/form-group'\r\nimport { withRouter } from 'react-router-dom'\r\nimport LocalStorageService from '../../app/service/localStorageService'\r\nimport SelectMenu from '../../components/selectMenu'\r\nimport EntryTable from './entryTable'\r\nimport EntryService from '../../app/service/entryService'\r\nimport UserService from '../../app/service/userService'\r\nimport GeneralServices from '../../app/service/generalServices'\r\n\r\nimport {BiSearch} from 'react-icons/bi'\r\nimport {FaSave} from 'react-icons/fa'\r\nimport * as popUp from '../../components/toastr'\r\n\r\nimport { Dialog } from 'primereact/dialog'\r\nimport { Button } from 'primereact/button'\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\nclass SearchEntry extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.entryService = new EntryService;\r\n        this.userService = new UserService;\r\n        this.generalServices = new GeneralServices;\r\n    }\r\n\r\n    state = {\r\n        year: '',\r\n        month: '',\r\n        type: '',\r\n        status: '',\r\n        description: '',\r\n        value: null,\r\n        user: null,\r\n        entryList: [],\r\n        errorUserMessage: null,\r\n        inputUserErrorClass: null,\r\n        listOfUsers: [],\r\n        displayConfirmation: false,\r\n        idOfEntryToBeDeleted: null,\r\n        errorYearMessage: null,\r\n        inputYearErrorClass: null,\r\n        errorMonthMessage: null,\r\n        inputMonthErrorClass: null,\r\n        errorTypeMessage: null,\r\n        inputTypeErrorClass: null,\r\n        errorValueMessage: null,\r\n        inputValueErrorClass: null,\r\n        errorDescriptionMessage: null,\r\n        inputDescriptionErrorClass: null\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.userList()\r\n    }\r\n    userList = async () => {\r\n        var list = [{label: 'Selecione...', value:''}]\r\n        var apiList = []\r\n        await this.userService.getAllUsers()\r\n        .then(response => {\r\n            apiList = response.data\r\n            apiList.forEach(user => {\r\n                list.push({label: user.email, value: user.id})\r\n            });\r\n        }).catch(error => {\r\n            popUp.errorPopUp(error.response.data)\r\n        })\r\n        this.setState({listOfUsers: list})\r\n    }\r\n\r\n    handleChange = async (event) => {\r\n        const value = event.target.value\r\n        const name = event.target.name\r\n        await this.setState({ [name]: value })\r\n        this.search()\r\n    }\r\n\r\n    resetView = () => {\r\n        this.setState({errorUserMessage: null})\r\n        this.setState({inputUserErrorClass: null})\r\n        this.setState({errorUserMessage: null})\r\n        this.setState({inputUserErrorClass: null})\r\n        this.setState({listOfUsers: []})\r\n        this.setState({displayConfirmation: false})\r\n        this.setState({idOfEntryToBeDeleted: null})\r\n        this.setState({errorYearMessage: null})\r\n        this.setState({inputYearErrorClass: null})\r\n        this.setState({errorMonthMessage: null})\r\n        this.setState({inputMonthErrorClass: null})\r\n        this.setState({errorTypeMessage: null})\r\n        this.setState({inputTypeErrorClass: null})\r\n        this.setState({errorValueMessage: null})\r\n        this.setState({inputValueErrorClass: null})\r\n        this.setState({errorDescriptionMessage: null})\r\n        this.setState({inputDescriptionErrorClass: null})\r\n    }\r\n    search = (showInfoPopUp) => {\r\n        const entryFilter = {\r\n            year: parseInt(this.state.year),\r\n            month: this.state.month,\r\n            type: this.state.type,\r\n            status: this.state.status,\r\n            user: this.state.user,\r\n            value: this.state.value,\r\n            description: this.state.description\r\n        }\r\n        console.log(\"serach\", entryFilter.value)\r\n        this.entryService.search(entryFilter)\r\n        .then(response => {\r\n            this.setState({entryList:response.data})\r\n            if(!this.state.entryList.length && showInfoPopUp){\r\n                popUp.infoPopUp(\"Nenhum lanÃ§amento encontrado com os dados informados\")\r\n            }\r\n        }).catch(error => {\r\n            popUp.errorPopUp(error.response.data)\r\n        })\r\n        \r\n    }\r\n\r\n    editEntry = (id) => {\r\n        console.log(\"edit entry \", id)\r\n    }\r\n    askForDeleteEntry = (entryId) => {\r\n        this.setState({idOfEntryToBeDeleted: entryId})\r\n        this.setState({displayConfirmation: true})\r\n    }\r\n    renderDeleteConfirmationFooter = () => {\r\n        return (\r\n            <div>\r\n                <Button label=\"Cancelar\" icon=\"pi pi-times\" onClick={() => this.cancelDeleteEntry()}\r\n                        className=\"p-button-text\" />\r\n                <Button label=\"Confirmar\" icon=\"pi pi-check\"\r\n                        onClick={() => this.deleteEntry(this.state.idOfEntryToBeDeleted)} autoFocus />\r\n            </div>\r\n        );\r\n    }\r\n    deleteEntry = async (id) => {\r\n        console.log(\"delete entry \", id)\r\n        await this.entryService.deleteEntryById(id)\r\n        .then(response => {\r\n            popUp.successPopUp(\"LanÃ§amento deletado com sucesso\")\r\n        })\r\n        .catch(error => {\r\n            popUp.errorPopUp(error.response.data)\r\n        })\r\n        this.search()\r\n        this.setState({idOfEntryToBeDeleted: null})\r\n        this.setState({displayConfirmation: false})\r\n\r\n    }\r\n    cancelDeleteEntry = () => {\r\n        this.setState({displayConfirmation: false})\r\n        this.setState({idOfEntryToBeDeleted: null})\r\n    }\r\n    checkData = () => {\r\n        var check = true\r\n\r\n        if(!this.state.year){\r\n            this.setState({errorYearMessage: \"Campo Ano Ã© obrigatÃ³rio\"})\r\n            this.setState({inputYearErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.month){\r\n            this.setState({errorMonthMessage: \"Campo MÃªs Ã© obrigatÃ³rio\"})\r\n            this.setState({inputMonthErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.type){\r\n            this.setState({errorTypeMessage: \"Campo Tipo de LanÃ§amento Ã© obrigatÃ³rio\"})\r\n            this.setState({inputTypeErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.value){\r\n            this.setState({errorValueMessage: \"Campo Valor Ã© obrigatÃ³rio\"})\r\n            this.setState({inputValueErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.description){\r\n            this.setState({errorDescriptionMessage: \"Campo DescriÃ§Ã£o Ã© obrigatÃ³rio\"})\r\n            this.setState({inputDescriptionErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        return check\r\n    }\r\n    save = async () => {\r\n        this.resetView()\r\n        if(this.checkData()){\r\n            const {year, month, type, value, description} = this.state\r\n            const loggedUser = LocalStorageService.getItem('userLoggedIn')\r\n            const newEntry = {year, month, type, value, description, user: loggedUser.id}\r\n            await this.entryService.save(newEntry)\r\n            .then(response => {\r\n                popUp.successPopUp(response.data)\r\n                popUp.infoPopUp(\"Status salvo como Pendente automaticamente\")\r\n            })\r\n            .catch(error => {\r\n                popUp.errorPopUp(error.response.data)\r\n            })\r\n            this.search()\r\n    }\r\n    }\r\n\r\n    render() {\r\n        const yearList = this.entryService.getYearList()\r\n        const typeList = this.entryService.getTypeList()\r\n        const statusList = this.entryService.getStatusList()\r\n        const monthList =  this.entryService.getMonthList()\r\n        return (\r\n                   \r\n            <div className=\"bs-docs-section\">\r\n                <Card title = \"Busca e Cadastro de LanÃ§amentos\">\r\n                    <div className = \"col-md-12\">\r\n                    <div className=\"row\">\r\n                    <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Ano \" htmlFor = \"InputYear\">\r\n                            <SelectMenu className={\"form-control \" + this.state.inputYearErrorClass}\r\n                            name=\"year\"\r\n                            list={yearList} \r\n                            value={this.state.year}\r\n                            onChange={this.handleChange}/> \r\n                            <div class=\"invalid-feedback\">{this.state.errorYearMessage}</div>  \r\n                        </FormGroup> \r\n                        </div>\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"MÃªs \" htmlFor = \"Inputmonth\">\r\n                            <SelectMenu className={\"form-control \" + this.state.inputMonthErrorClass}\r\n                                        name=\"month\"\r\n                                        list= {monthList}\r\n                                        value={this.state.month}\r\n                                        onChange={this.handleChange}/>\r\n                            <div class=\"invalid-feedback\">{this.state.errorMonthMessage}</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Tipo de LanÃ§amento \" htmlFor = \"InputType\">\r\n                            <SelectMenu className={\"form-control \" + this.state.inputTypeErrorClass}\r\n                                        name=\"type\"\r\n                                        list= {typeList} \r\n                                        value={this.state.type}\r\n                                        onChange={this.handleChange}/>\r\n                            <div class=\"invalid-feedback\">{this.state.errorTypeMessage}</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Status do LanÃ§amento \" htmlFor = \"InputStatus\">\r\n                            <SelectMenu className=\"form-control\"\r\n                                        name=\"status\"\r\n                                        list= {statusList} \r\n                                        value={this.state.status}\r\n                                        onChange={this.handleChange}/>\r\n                        <div class=\"info-feedback\">Campo utilizado apenas para busca</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"Valor \" htmlFor = \"InputValue\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <div class=\"input-group-prepend\">\r\n                            <span class=\"input-group-text\">R$</span>\r\n                            </div>\r\n                            <input type=\"text\"\r\n                                       className={\"form-control \" + this.state.inputValueErrorClass}\r\n                                        name = \"value\"\r\n                                        value = {this.state.value}\r\n                                        onChange = {this.handleChange}\r\n                                        id=\"InputValue\"\r\n                                        placeholder=\"Digite o valor\" />\r\n                            <div class=\"invalid-feedback\">{this.state.errorValueMessage}</div>\r\n                        </div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className = \"col-md-5\">\r\n                        <FormGroup label = \"UsuÃ¡rio \" htmlFor = \"InputUser\">\r\n                            <SelectMenu className=\"form-control\"\r\n                                        name=\"user\"\r\n                                        list= {this.state.listOfUsers} \r\n                                        value={this.state.user}\r\n                                        onChange={this.handleChange}/>\r\n                        <div class=\"info-feedback\">Campo utilizado apenas para busca</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                        <div className = \"col-md-10\">\r\n                        <FormGroup label = \"DescriÃ§Ã£o \" htmlFor = \"InputDecription\">\r\n                            <textarea   className={\"form-control \" + this.state.inputDescriptionErrorClass}\r\n                                        id=\"InputDecription\"\r\n                                        name=\"description\"\r\n                                        style={{marginTop: '0px', marginBottom: '0px', height: '80px'}}\r\n                                        placeholder=\"Digite a descriÃ§Ã£o\"\r\n                                        onChange = {this.handleChange} />\r\n                        <div class=\"invalid-feedback\">{this.state.errorDescriptionMessage}</div>\r\n                        </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <button className=\"btn btn-success\" onClick = {e => {this.search(true)} }><BiSearch />  Buscar</button>\r\n                        <button className=\"btn btn-danger right-button\" \r\n                                onClick = {this.save}><FaSave />  Cadastrar</button>\r\n                    </div>\r\n                    <div className=\"bs-docs-section\">\r\n                        <EntryTable list={this.state.entryList}\r\n                                    editButton = {this.editEntry}\r\n                                    deleteButton = {this.askForDeleteEntry} />\r\n                    </div>\r\n                </Card>\r\n                <Dialog header=\"Deletar lanÃ§amento\"\r\n                        visible={this.state.displayConfirmation}\r\n                        modal = {true} //congela restante da tela\r\n                        style={{ width: '350px' }}\r\n                        footer={this.renderDeleteConfirmationFooter()}\r\n                        onHide={() => this.setState({displayConfirmation: false})}>\r\n                    <div className=\"confirmation-content row\" style={{marginLeft: '10px'}}>\r\n                        <i className=\"pi pi-exclamation-triangle p-mr-3\" style={{ fontSize: '2rem', marginRight: '10px'}} />\r\n                        <div style={{marginBottom: '10px'}}> Deseja confirmar deleÃ§Ã£o? </div>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n              \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(SearchEntry)",["74","75"],"D:\\Dev\\Fincances-Frontend\\src\\views\\login.js",["76"],"D:\\Dev\\Fincances-Frontend\\src\\app\\apiServices.js",[],"D:\\Dev\\Fincances-Frontend\\src\\main\\App.js",[],"D:\\Dev\\Fincances-Frontend\\src\\views\\home.js",["77"],"D:\\Dev\\Fincances-Frontend\\src\\views\\entry\\entryTable.js",[],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\entryService.js",[],"D:\\Dev\\Fincances-Frontend\\src\\components\\navbar\\navItem.js",[],["78","79"],"D:\\Dev\\Fincances-Frontend\\src\\components\\selectMenu.js",[],"D:\\Dev\\Fincances-Frontend\\src\\views\\signUp.js",["80"],"import React from 'react'\r\nimport Card from '../components/card'\r\nimport FormGroup from '../components/form-group'\r\nimport { FaCheckSquare } from 'react-icons/fa';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport { withRouter } from 'react-router-dom'\r\nimport UserService from '../app/service/userService';\r\nimport { successPopUp, errorPopUp } from '../components/toastr';\r\n\r\n\r\nclass SingUp extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.userService = new UserService;\r\n    }\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        errorEmailMessage: null,\r\n        inputEmailErrorClass: null,\r\n        errorConfirmPasswordMessage: null,\r\n        inputConfirmPasswordErrorClass: null,\r\n        errorPasswordMessage: null,\r\n        inputPasswordErrorClass: null,\r\n        errorNameMessage: null,\r\n        inputNameErrorClass: null,\r\n        signUpSuccessInputClass: null\r\n    }\r\n    resetView = () => {\r\n        this.setState({errorEmailMessage: null})\r\n        this.setState({inputEmailErrorClass: null})\r\n        this.setState({errorConfirmPasswordMessage: null})\r\n        this.setState({inputConfirmPasswordErrorClass: null})\r\n        this.setState({errorPasswordMessage: null})\r\n        this.setState({inputPasswordErrorClass: null})\r\n        this.setState({errorNameMessage: null})\r\n        this.setState({inputNameErrorClass: null})\r\n        this.setState({signUpSuccessInputClass: null})\r\n\r\n    }\r\n    checkData = () => {\r\n        var check = true\r\n\r\n        if(!this.state.name){\r\n            this.setState({errorNameMessage: \"Campo nome Ã© obrigatÃ³rio\"})\r\n            this.setState({inputNameErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.email){\r\n            this.setState({errorEmailMessage: \"Campo email Ã© obrigatÃ³rio\"})\r\n            this.setState({inputEmailErrorClass: \"is-invalid\"})\r\n            check=false\r\n        } else if(!this.state.email.match(/^[a-z0-9.]+@[a-z0-9]+\\.[a-z]/)){\r\n            this.setState({errorEmailMessage: \"Informe um email vÃ¡lido\"})\r\n            this.setState({inputEmailErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        if(!this.state.password){\r\n            this.setState({errorPasswordMessage: \"Campo senha Ã© obrigatÃ³rio\"})\r\n            this.setState({inputPasswordErrorClass: \"is-invalid\"})    \r\n            check=false        \r\n        }\r\n        if(!this.state.confirmPassword){\r\n            this.setState({errorConfirmPasswordMessage: \"Campo confirmaÃ§Ã£o de senha Ã© obrigatÃ³rio\"})\r\n            this.setState({inputConfirmPasswordErrorClass: \"is-invalid\"})    \r\n            check=false  \r\n        }\r\n        if(this.state.password && this.state.confirmPassword && this.state.password !== this.state.confirmPassword){\r\n            this.setState({errorConfirmPasswordMessage: \"As senhas nÃ£o conferem\"})\r\n            this.setState({inputConfirmPasswordErrorClass: \"is-invalid\"})\r\n            check=false\r\n        }\r\n        return check\r\n    }\r\n\r\n    signUp = () => {\r\n        this.resetView()\r\n        if(this.checkData()){\r\n            this.userService.signUp({\r\n                name: this.state.name,\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            }).then(response => {\r\n                successPopUp('UsuÃ¡rio cadastrado com sucesso')\r\n                this.setState({signUpSuccessInputClass: \"is-valid\"})\r\n            }).catch(error => {\r\n                var data = error.response.data\r\n                errorPopUp(data)                \r\n            })\r\n        }\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.history.push('/login')\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"row\">\r\n                <div className = \"col-md-6\" style = { {position : 'relative', left : '300px'} }>\r\n                    <div className=\"bs-docs-section\">\r\n                        <Card title = \"Cadastro de UsuÃ¡rio\">\r\n                        <fieldset>\r\n                                <FormGroup label = \"Nome: \" htmlFor = \"InputName\">\r\n                                    <input type=\"text\"\r\n                                    className={\"form-control \" + this.state.signUpSuccessInputClass + \" \"\r\n                                                + this.state.inputNameErrorClass}\r\n                                    name = \"name\"\r\n                                    value = {this.state.name}\r\n                                    onChange = {e => this.setState({name: e.target.value})}\r\n                                    id=\"InputName\"\r\n                                    aria-describedby=\"NameHelp\"\r\n                                    placeholder=\"Digite seu nome\" />\r\n                                    <div class=\"invalid-feedback\">{this.state.errorNameMessage}</div>\r\n                                </FormGroup>\r\n                                <FormGroup label = \"Email: \" htmlFor = \"InputEmail\">\r\n                                    <input type=\"email\"\r\n                                    className={\"form-control \" + this.state.signUpSuccessInputClass + \" \"\r\n                                                + this.state.inputEmailErrorClass}\r\n                                    name = \"email\"\r\n                                    value = {this.state.email}\r\n                                    onChange = {e => this.setState({email: e.target.value})}\r\n                                    id=\"InputEmail\"\r\n                                    aria-describedby=\"emailHelp\"\r\n                                    placeholder=\"Digite seu Email\" />\r\n                                    <div class=\"invalid-feedback\">{this.state.errorEmailMessage}</div>\r\n                                </FormGroup>\r\n                                <FormGroup label = \"Senha: \" htmlFor = \"InputPassword\">\r\n                                    <input type=\"password\"\r\n                                    className={\"form-control \" + this.state.signUpSuccessInputClass + \" \"\r\n                                                + this.state.inputPasswordErrorClass}\r\n                                    name = \"password\"\r\n                                    value = {this.state.password}\r\n                                    onChange = {e => this.setState({password: e.target.value})}\r\n                                    id=\"InputPassword\"\r\n                                    placeholder=\"Digite a senha\" />\r\n                                    <div class=\"invalid-feedback\">{this.state.errorPasswordMessage}</div>\r\n                                </FormGroup>\r\n                                <FormGroup label = \"ConfirmaÃ§Ã£o de Senha: \" htmlFor = \"InputConfirmPassword\">\r\n                                    <input type=\"password\"\r\n                                    className={\"form-control \" + this.state.inputConfirmPasswordErrorClass + \" \"\r\n                                                + this.state.signUpSuccessInputClass}\r\n                                    value = {this.state.confirmPassword}\r\n                                    onChange = {e => this.setState({confirmPassword: e.target.value})}\r\n                                    id=\"InputConfirmPassword\"\r\n                                    placeholder=\"Repita a senha\" />\r\n                                    <div class=\"invalid-feedback\">{this.state.errorConfirmPasswordMessage}</div>\r\n                                </FormGroup>\r\n                                <button className=\"btn btn-success\" onClick={this.signUp} ><FaCheckSquare />  Cadastrar</button>\r\n                                <button className=\"btn btn-danger right-button\" onClick={this.cancel}><FaTimes />  Cancelar</button>\r\n                            </fieldset>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(SingUp)",["81","82"],"D:\\Dev\\Fincances-Frontend\\src\\index.js",[],"D:\\Dev\\Fincances-Frontend\\src\\components\\card.js",[],"D:\\Dev\\Fincances-Frontend\\src\\app\\service\\userService.js",[],"D:\\Dev\\Fincances-Frontend\\src\\main\\routes.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":18,"column":10,"nodeType":"89","messageId":"90","endLine":18,"endColumn":19},{"ruleId":"91","severity":1,"message":"92","line":24,"column":29,"nodeType":"93","messageId":"94","endLine":24,"endColumn":45,"fix":"95"},{"ruleId":"91","severity":1,"message":"92","line":25,"column":28,"nodeType":"93","messageId":"94","endLine":25,"endColumn":43,"fix":"96"},{"ruleId":"91","severity":1,"message":"92","line":26,"column":32,"nodeType":"93","messageId":"94","endLine":26,"endColumn":51,"fix":"97"},{"ruleId":"83","replacedBy":"98"},{"ruleId":"85","replacedBy":"99"},{"ruleId":"91","severity":1,"message":"92","line":15,"column":28,"nodeType":"93","messageId":"94","endLine":15,"endColumn":43,"fix":"100"},{"ruleId":"91","severity":1,"message":"92","line":11,"column":26,"nodeType":"93","messageId":"94","endLine":11,"endColumn":41,"fix":"101"},{"ruleId":"83","replacedBy":"102"},{"ruleId":"85","replacedBy":"103"},{"ruleId":"91","severity":1,"message":"92","line":15,"column":28,"nodeType":"93","messageId":"94","endLine":15,"endColumn":43,"fix":"104"},{"ruleId":"83","replacedBy":"105"},{"ruleId":"85","replacedBy":"106"},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'InputText' is defined but never used.","Identifier","unusedVar","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"109","text":"110"},{"range":"111","text":"110"},{"range":"112","text":"110"},["107"],["108"],{"range":"113","text":"110"},{"range":"114","text":"110"},["107"],["108"],{"range":"115","text":"110"},["107"],["108"],"no-global-assign","no-unsafe-negation",[919,919],"()",[964,964],[1017,1017],[563,563],[361,361],[502,502]]